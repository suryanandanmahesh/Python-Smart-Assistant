# importing modules
import time
from playsound import playsound
from gtts import gTTS
import os
import turtle
import random
import speech_recognition as sr
import requests, json

# API base URL
BASE_URL = "https://api.openweathermap.org/data/2.5/weather?"

# City Name
CITY = "Kerala"

# Your API key
API_KEY = "5dae5a15d457a6c326215c156f1083b3"

# updating the URL
URL = BASE_URL + "q=" + CITY + "&appid=" + API_KEY

r = sr.Recognizer()

# Setup
print("Now we have some setting up to do.")
print("")
key = input("How would you like to interact with your assistant (keyboard/speech): ")

if key == "speech":

    print("Hi! I am your personal assistant, nice to meet you!")
    playsound('C:/Users/surya/Documents/Python/Smart assistant/1.mp3')

    # These are the things you can say to the assistant
    print("")
    print("You can ask me things like:")
    print("")
    print("a)Play a game")
    print("b)Set a reminder")
    print("c)Show the reminder")
    print("d)Open calculator")
    print("e)Convert text to speech")
    print("f)More info")
    print("")
    playsound('C:/Users/surya/Documents/Python/Smart assistant/2.mp3')

    try:
        while True:

            time.sleep(.3)
            playsound('C:/Users/surya/Documents/Python/Smart assistant/3.mp3')
            with sr.Microphone() as source:
                print("What would you like to do? ")
                au = r.listen(source)
                try:
                    c = r.recognize_google(au)
                except:
                    print("Sorry could not recognize what you said")

            if c == "What is the weather":
                playsound('C:/Users/surya/Documents/Python/Smart assistant/we.mp3')
                response = requests.get(URL)

                # checking the status code of the request
                if response.status_code == 200:

                   # retrieving data in the json format
                   data = response.json()

                   # take the main dict block
                   main = data['main']

                   # getting temperature
                   temperature = main['temp']
                   # getting feel like
                   temp_feel_like = main['feels_like']  
                   # getting the humidity
                   humidity = main['humidity']
                   # getting the pressure
                   pressure = main['pressure']

                   # weather report
                   weather_report = data['weather']
                   # wind report
                   wind_report = data['wind']

                   print("")
                   print(f"{CITY:-^35}")
                   print(f"Temperature: {temperature}")
                   print(f"Feel Like: {temp_feel_like}")    
                   print(f"Humidity: {humidity}")
                   print(f"Pressure: {pressure}")
                   print(f"Weather Report: {weather_report[0]['description']}")
                   print(f"Wind Speed: {wind_report['speed']}")
                   print("")
                else:
                   # showing the error message
                   print("Error in the HTTP request")

            if c == "What's the weather":
                playsound('C:/Users/surya/Documents/Python/Smart assistant/we.mp3')
                response = requests.get(URL)

                # checking the status code of the request
                if response.status_code == 200:

                   # retrieving data in the json format
                   data = response.json()

                   # take the main dict block
                   main = data['main']

                   # getting temperature
                   temperature = main['temp']
                   # getting feel like
                   temp_feel_like = main['feels_like']  
                   # getting the humidity
                   humidity = main['humidity']
                   # getting the pressure
                   pressure = main['pressure']

                   # weather report
                   weather_report = data['weather']
                   # wind report
                   wind_report = data['wind']

                   print("")
                   print(f"{CITY:-^35}")
                   print(f"Temperature: {temperature}")
                   print(f"Feel Like: {temp_feel_like}")    
                   print(f"Humidity: {humidity}")
                   print(f"Pressure: {pressure}")
                   print(f"Weather Report: {weather_report[0]['description']}")
                   print(f"Wind Speed: {wind_report['speed']}")
                   print("")
                else:
                   # showing the error message
                   print("Error in the HTTP request")
                   
            if c == "a": # 'a' to play the snake game

                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')


                # Simple Snake Game in Python

                delay = 0.1

                # Score
                score = 0
                high_score = 0

                # Set up the screen
                wn = turtle.Screen()
                wn.title("Snake Game")
                wn.bgcolor("white")
                wn.setup(width=600, height=600)
                wn.tracer(0) # Turns off the screen updates

                # Snake head
                head = turtle.Turtle()
                head.speed(0)
                head.shape("square")
                head.color("red")
                head.penup()
                head.goto(0,0)
                head.direction = "stop"

                # Snake food
                food = turtle.Turtle()
                food.speed(0)
                food.shape("circle")
                food.color("green")
                food.penup()
                food.goto(0,100)

                segments = []

                # Pen
                pen = turtle.Turtle()
                pen.speed(0)
                pen.shape("square")
                pen.color("green")
                pen.penup()
                pen.hideturtle()
                pen.goto(0, 260)
                pen.write("Score: 0  High Score: 0", align="center", font=("Calibri", 24, "normal"))

                # Functions
                def go_up():
                    if head.direction != "down":
                        head.direction = "up"

                def go_down():
                    if head.direction != "up":
                        head.direction = "down"

                def go_left():
                    if head.direction != "right":
                        head.direction = "left"

                def go_right():
                    if head.direction != "left":
                        head.direction = "right"

                def move():
                    if head.direction == "up":
                        y = head.ycor()
                        head.sety(y + 20)

                    if head.direction == "down":
                        y = head.ycor()
                        head.sety(y - 20)

                    if head.direction == "left":
                        x = head.xcor()
                        head.setx(x - 20)

                    if head.direction == "right":
                        x = head.xcor()
                        head.setx(x + 20)

                # Keyboard bindings
                wn.listen()
                wn.onkeypress(go_up, "Up")
                wn.onkeypress(go_down, "Down")
                wn.onkeypress(go_left, "Left")
                wn.onkeypress(go_right, "Right")

                # Main game loop
                while True:
                    wn.update()

                    # Check for a collision with the border
                    if head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:
                        time.sleep(1)
                        head.goto(0,0)
                        head.direction = "stop"

                        # Hide the segments
                        for segment in segments:
                            segment.goto(1000, 1000)

                        # Clear the segments list
                        segments.clear()

                        # Reset the score
                        score = 0

                        # Reset the delay
                        delay = 0.1

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 


                    # Check for a collision with the food
                    if head.distance(food) < 20:
                        # Move the food to a random spot
                        x = random.randint(-290, 290)
                        y = random.randint(-290, 290)
                        food.goto(x,y)

                        # Add a segment
                        new_segment = turtle.Turtle()
                        new_segment.speed(0)
                        new_segment.shape("square")
                        new_segment.color("orange")
                        new_segment.penup()
                        segments.append(new_segment)

                        # Shorten the delay
                        delay -= 0.001

                        # Increase the score
                        score += 10

                        if score > high_score:
                            high_score = score

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 

                    # Move the end segments first in reverse order
                    for index in range(len(segments)-1, 0, -1):
                        x = segments[index-1].xcor()
                        y = segments[index-1].ycor()
                        segments[index].goto(x, y)

                    # Move segment 0 to where the head is
                    if len(segments) > 0:
                        x = head.xcor()
                        y = head.ycor()
                        segments[0].goto(x,y)

                    move()    

                    # Check for head collision with the body segments
                    for segment in segments:
                        if segment.distance(head) < 20:
                            time.sleep(1)
                            head.goto(0,0)
                            head.direction = "stop"

                            # Hide the segments
                            for segment in segments:
                                segment.goto(1000, 1000)

                            # Clear the segments list
                            segments.clear()

                            # Reset the score
                            score = 0

                            # Reset the delay
                            delay = 0.1

                            # Update the score display
                            pen.clear()
                            pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal"))

                    time.sleep(delay)

                wn.mainloop()

            if c == "a.": # Cheating mode by pressing 'a.'

                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')


                # Simple Snake Game in Python

                delay = 0.1

                # Score
                score = 0
                high_score = 0

                # Set up the screen
                wn = turtle.Screen()
                wn.title("Snake Game")
                wn.bgcolor("white")
                wn.setup(width=600, height=600)
                wn.tracer(0) # Turns off the screen updates

                # Snake head
                head = turtle.Turtle()
                head.speed(0)
                head.shape("square")
                head.color("red")
                head.penup()
                head.goto(0,0)
                head.direction = "stop"

                # Snake food
                food = turtle.Turtle()
                food.speed(0)
                food.shape("circle")
                food.color("green")
                food.penup()
                food.goto(0,100)

                segments = []

                # Pen
                pen = turtle.Turtle()
                pen.speed(0)
                pen.shape("square")
                pen.color("green")
                pen.penup()
                pen.hideturtle()
                pen.goto(0, 260)
                pen.write("Score: 0  High Score: 0", align="center", font=("Calibri", 24, "normal"))

                # Functions
                def go_up():
                    if head.direction != "down":
                        head.direction = "up"

                def go_down():
                    if head.direction != "up":
                        head.direction = "down"

                def go_left():
                    if head.direction != "right":
                        head.direction = "left"

                def go_right():
                    if head.direction != "left":
                        head.direction = "right"

                def move():
                    if head.direction == "up":
                        y = head.ycor()
                        head.sety(y + 20)

                    if head.direction == "down":
                        y = head.ycor()
                        head.sety(y - 20)

                    if head.direction == "left":
                        x = head.xcor()
                        head.setx(x - 20)

                    if head.direction == "right":
                        x = head.xcor()
                        head.setx(x + 20)

                # Keyboard bindings
                wn.listen()
                wn.onkeypress(go_up, "Down")
                wn.onkeypress(go_down, "Up")
                wn.onkeypress(go_left, "Right")
                wn.onkeypress(go_right, "Left")

                # Main game loop
                while True:
                    wn.update()

                    # Check for a collision with the border
                    if head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:
                        time.sleep(1)
                        head.goto(0,0)
                        head.direction = "stop"

                        # Hide the segments
                        for segment in segments:
                            segment.goto(1000, 1000)

                        # Clear the segments list
                        segments.clear()

                        # Reset the score
                        score = 0

                        # Reset the delay
                        delay = 0.1

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 


                    # Check for a collision with the food
                    if head.distance(food) < 20:
                        # Move the food to a random spot
                        x = random.randint(-290, 290)
                        y = random.randint(-290, 290)
                        food.goto(x,y)

                        # Add a segment
                        new_segment = turtle.Turtle()
                        new_segment.speed(0)
                        new_segment.shape("square")
                        new_segment.color("orange")
                        new_segment.penup()
                        segments.append(new_segment)

                        # Shorten the delay
                        delay -= 0.001

                        # Increase the score
                        score += 10

                        if score > high_score:
                            high_score = score

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 

                    # Move the end segments first in reverse order
                    for index in range(len(segments)-1, 0, -1):
                        x = segments[index-1].xcor()
                        y = segments[index-1].ycor()
                        segments[index].goto(x, y)

                    # Move segment 0 to where the head is
                    if len(segments) > 0:
                        x = head.xcor()
                        y = head.ycor()
                        segments[0].goto(x,y)

                    move()    

                    # Check for head collision with the body segments
                    for segment in segments:
                        if segment.distance(head) < 20:
                            time.sleep(1)
                            head.goto(0,0)
                            head.direction = "stop"

                            # Hide the segments
                            for segment in segments:
                                segment.goto(1000, 1000)

                            # Clear the segments list
                            segments.clear()

                            # Reset the score
                            score = 0

                            # Reset the delay
                            delay = 0.1

                            # Update the score display
                            pen.clear()
                            pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal"))

                    time.sleep(delay)

                wn.mainloop()

            if c == "a,": # Cheating mode by pressing 'a,'

                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')


                # Simple Snake Game in Python

                delay = 0.1

                # Score
                score = 0
                high_score = 0

                # Set up the screen
                wn = turtle.Screen()
                wn.title("Snake Game")
                wn.bgcolor("white")
                wn.setup(width=600, height=600)
                wn.tracer(0) # Turns off the screen updates

                # Snake head
                head = turtle.Turtle()
                head.speed(0)
                head.shape("square")
                head.color("red")
                head.penup()
                head.goto(0,0)
                head.direction = "stop"

                # Snake food
                food = turtle.Turtle()
                food.speed(0)
                food.shape("circle")
                food.color("green")
                food.penup()
                food.goto(0,100)

                segments = []

                # Pen
                pen = turtle.Turtle()
                pen.speed(0)
                pen.shape("square")
                pen.color("green")
                pen.penup()
                pen.hideturtle()
                pen.goto(0, 260)
                pen.write("Score: 0  High Score: 0", align="center", font=("Calibri", 24, "normal"))

                # Functions
                def go_up():
                    if head.direction != "down":
                        head.direction = "up"

                def go_down():
                    if head.direction != "up":
                        head.direction = "down"

                def go_left():
                    if head.direction != "right":
                        head.direction = "left"

                def go_right():
                    if head.direction != "left":
                        head.direction = "right"

                def move():
                    if head.direction == "up":
                        y = head.ycor()
                        head.sety(y + 20)

                    if head.direction == "down":
                        y = head.ycor()
                        head.sety(y - 20)

                    if head.direction == "left":
                        x = head.xcor()
                        head.setx(x - 20)

                    if head.direction == "right":
                        x = head.xcor()
                        head.setx(x + 20)

                # Keyboard bindings
                wn.listen()
                wn.onkeypress(go_up, "Up")
                wn.onkeypress(go_down, "Down")
                wn.onkeypress(go_left, "Left")
                wn.onkeypress(go_right, "Right")

                # Main game loop
                while True:
                    wn.update()

                    # Check for a collision with the border
                    if head.xcor()>290 or head.xcor()<-90 or head.ycor()>90 or head.ycor()<-190:
                        time.sleep(1)
                        head.goto(0,0)
                        head.direction = "stop"

                        # Hide the segments
                        for segment in segments:
                            segment.goto(1000, 1000)

                        # Clear the segments list
                        segments.clear()

                        # Reset the score
                        score = 0

                        # Reset the delay
                        delay = 0.1

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 


                    # Check for a collision with the food
                    if head.distance(food) < 20:
                        # Move the food to a random spot
                        x = random.randint(-290, 290)
                        y = random.randint(-290, 290)
                        food.goto(x,y)

                        # Add a segment
                        new_segment = turtle.Turtle()
                        new_segment.speed(0)
                        new_segment.shape("square")
                        new_segment.color("orange")
                        new_segment.penup()
                        segments.append(new_segment)

                        # Shorten the delay
                        delay -= 0.001

                        # Increase the score
                        score += 10

                        if score > high_score:
                            high_score = score

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 

                    # Move the end segments first in reverse order
                    for index in range(len(segments)-1, 0, -1):
                        x = segments[index-1].xcor()
                        y = segments[index-1].ycor()
                        segments[index].goto(x, y)

                    # Move segment 0 to where the head is
                    if len(segments) > 0:
                        x = head.xcor()
                        y = head.ycor()
                        segments[0].goto(x,y)

                    move()    

                    # Check for head collision with the body segments
                    for segment in segments:
                        if segment.distance(head) < 20:
                            time.sleep(1)
                            head.goto(0,0)
                            head.direction = "stop"

                            # Hide the segments
                            for segment in segments:
                                segment.goto(1000, 1000)

                            # Clear the segments list
                            segments.clear()

                            # Reset the score
                            score = 0

                            # Reset the delay
                            delay = 0.1

                            # Update the score display
                            pen.clear()
                            pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal"))

                    time.sleep(delay)

                wn.mainloop()


            if c == "b": # Set a reminder

                playsound('C:/Users/surya/Documents/Python/Smart assistant/4.mp3')
                r = input("What is it?")
                time.sleep(1)
                playsound('C:/Users/surya/Documents/Python/Smart assistant/5.mp3')
                t = input("How many minutes later should I show it?")
                t = int(t)
                print("The reminder has been set")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/6.mp3')
                time.sleep(t*60-7)
                playsound('C:/Users/surya/Documents/Python/Smart assistant/Bell.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/rem.mp3')
                time.sleep(.5)
                print("")
                print("")
                print(r)
                print("")
                tts = gTTS(text=r, lang='en')
                tts.save('read.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/read.mp3')
                os.remove("read.mp3")

            if c == "c": # Show the reminder

                time.sleep(1)
                print("Ok")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                time.sleep(.7)
                print("")
                print("")
                print(r)
                print("")
                print("")
                tts = gTTS(text=r, lang='en')
                tts.save('read.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/read.mp3')
                os.remove("read.mp3")

            if c == "d": # Calculator

            
                print("Ok")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/f.mp3')
                a = input("First number: ")
                a = int(a)
                playsound('C:/Users/surya/Documents/Python/Smart assistant/o.mp3')
                o = input("Operation( + or - or / or x ):")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/s.mp3')
                b = input("Second number: ")
                b = int(b)          


                if o == "+":

                    q = int(a+b)
                    print("")
                    print("Ok! ",a,"+",b,"=",q)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")

                elif o == "-":

                    w = int(a-b)
                    print("")
                    print("Ok! ",a,"-",b,"=",w)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")


                elif o == "/":

                    z = int(a-b)
                    print("")
                    print("Ok! ",a,"/",b,"=",z)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")


                elif o == "x":

                    t = int(a*b)
                    print("")
                    print("Ok! ",a,"x",b,"=",t)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")

                else:

                    print("Invalid operation")
            if c == "Play a game": # Snake game

                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')


                # Simple Snake Game in Python


                delay = 0.1

                # Score
                score = 0
                high_score = 0

                # Set up the screen
                wn = turtle.Screen()
                wn.title("Snake Game")
                wn.bgcolor("white")
                wn.setup(width=600, height=600)
                wn.tracer(0) # Turns off the screen updates

                # Snake head
                head = turtle.Turtle()
                head.speed(0)
                head.shape("square")
                head.color("red")
                head.penup()
                head.goto(0,0)
                head.direction = "stop"

                # Snake food
                food = turtle.Turtle()
                food.speed(0)
                food.shape("circle")
                food.color("green")
                food.penup()
                food.goto(0,100)

                segments = []

                # Pen
                pen = turtle.Turtle()
                pen.speed(0)
                pen.shape("square")
                pen.color("green")
                pen.penup()
                pen.hideturtle()
                pen.goto(0, 260)
                pen.write("Score: 0  High Score: 0", align="center", font=("Calibri", 24, "normal"))

                # Functions
                def go_up():
                    if head.direction != "down":
                        head.direction = "up"

                def go_down():
                    if head.direction != "up":
                        head.direction = "down"

                def go_left():
                    if head.direction != "right":
                        head.direction = "left"

                def go_right():
                    if head.direction != "left":
                        head.direction = "right"

                def move():
                    if head.direction == "up":
                        y = head.ycor()
                        head.sety(y + 20)

                    if head.direction == "down":
                        y = head.ycor()
                        head.sety(y - 20)

                    if head.direction == "left":
                        x = head.xcor()
                        head.setx(x - 20)

                    if head.direction == "right":
                        x = head.xcor()
                        head.setx(x + 20)

                # Keyboard bindings
                wn.listen()
                wn.onkeypress(go_up, "Up")
                wn.onkeypress(go_down, "Down")
                wn.onkeypress(go_left, "Left")
                wn.onkeypress(go_right, "Right")

                # Main game loop
                while True:
                    wn.update()

                    # Check for a collision with the border
                    if head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:
                        time.sleep(1)
                        head.goto(0,0)
                        head.direction = "stop"

                        # Hide the segments
                        for segment in segments:
                            segment.goto(1000, 1000)

                        # Clear the segments list
                        segments.clear()

                        # Reset the score
                        score = 0

                        # Reset the delay
                        delay = 0.1

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 


                    # Check for a collision with the food
                    if head.distance(food) < 20:
                        # Move the food to a random spot
                        x = random.randint(-290, 290)
                        y = random.randint(-290, 290)
                        food.goto(x,y)

                        # Add a segment
                        new_segment = turtle.Turtle()
                        new_segment.speed(0)
                        new_segment.shape("square")
                        new_segment.color("orange")
                        new_segment.penup()
                        segments.append(new_segment)

                        # Shorten the delay
                        delay -= 0.001

                        # Increase the score
                        score += 10

                        if score > high_score:
                            high_score = score

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 

                    # Move the end segments first in reverse order
                    for index in range(len(segments)-1, 0, -1):
                        x = segments[index-1].xcor()
                        y = segments[index-1].ycor()
                        segments[index].goto(x, y)

                    # Move segment 0 to where the head is
                    if len(segments) > 0:
                        x = head.xcor()
                        y = head.ycor()
                        segments[0].goto(x,y)

                    move()    

                    # Check for head collision with the body segments
                    for segment in segments:
                        if segment.distance(head) < 20:
                            time.sleep(1)
                            head.goto(0,0)
                            head.direction = "stop"

                            # Hide the segments
                            for segment in segments:
                                segment.goto(1000, 1000)

                            # Clear the segments list
                            segments.clear()

                            # Reset the score
                            score = 0

                            # Reset the delay
                            delay = 0.1

                            # Update the score display
                            pen.clear()
                            pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal"))

                    time.sleep(delay)

                wn.mainloop()


            if c == "Set a reminder": # Set a reminder

                playsound('C:/Users/surya/Documents/Python/Smart assistant/4.mp3')
                r = input("What is it?")
                time.sleep(1)
                playsound('C:/Users/surya/Documents/Python/Smart assistant/5.mp3')
                t = input("How many minutes later should I show it?")
                t = int(t)
                print("The reminder has been set")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/6.mp3')
                time.sleep(t*60-7)
                playsound('C:/Users/surya/Documents/Python/Smart assistant/Bell.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/rem.mp3')
                time.sleep(.5)
                print("")
                print("")
                print(r)
                print("")
                tts = gTTS(text=r, lang='en')
                tts.save('read.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/read.mp3')
                os.remove("read.mp3")

            if c == "Show the reminder": # Show the reminder

                time.sleep(1)
                print("Ok")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                time.sleep(.7)
                print("")
                print("")
                print(r)
                print("")
                print("")
                tts = gTTS(text=r, lang='en')
                tts.save('read.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/read.mp3')
                os.remove("read.mp3")

            if c == "Open calculator": # Calculator

            
                print("Ok")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/f.mp3')
                a = input("First number: ")
                a = int(a)
                playsound('C:/Users/surya/Documents/Python/Smart assistant/o.mp3')
                o = input("Operation( + or - or / or x ):")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/s.mp3')
                b = input("Second number: ")
                b = int(b)          


                if o == "+": 

                    q = int(a+b)
                    print("")
                    print("Ok! ",a,"+",b,"=",q)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")

                elif o == "-":

                    w = int(a-b)
                    print("")
                    print("Ok! ",a,"-",b,"=",w)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")


                elif o == "/":

                    print("")
                    print("Ok! ",a,"/",b,"=",z)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")


                elif o == "x":

                    t = int(a*b)
                    print("")
                    print("Ok! ",a,"x",b,"=",t)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")

                else:

                    print("Invalid operation")

            if c == "game": # Snake game

                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')


                # Simple Snake Game in Python


                delay = 0.1

                # Score
                score = 0
                high_score = 0

                # Set up the screen
                wn = turtle.Screen()
                wn.title("Snake Game")
                wn.bgcolor("white")
                wn.setup(width=600, height=600)
                wn.tracer(0) # Turns off the screen updates

                # Snake head
                head = turtle.Turtle()
                head.speed(0)
                head.shape("square")
                head.color("red")
                head.penup()
                head.goto(0,0)
                head.direction = "stop"

                # Snake food
                food = turtle.Turtle()
                food.speed(0)
                food.shape("circle")
                food.color("green")
                food.penup()
                food.goto(0,100)

                segments = []

                # Pen
                pen = turtle.Turtle()
                pen.speed(0)
                pen.shape("square")
                pen.color("green")
                pen.penup()
                pen.hideturtle()
                pen.goto(0, 260)
                pen.write("Score: 0  High Score: 0", align="center", font=("Calibri", 24, "normal"))

                # Functions
                def go_up():
                    if head.direction != "down":
                        head.direction = "up"

                def go_down():
                    if head.direction != "up":
                        head.direction = "down"

                def go_left():
                    if head.direction != "right":
                        head.direction = "left"

                def go_right():
                    if head.direction != "left":
                        head.direction = "right"

                def move():
                    if head.direction == "up":
                        y = head.ycor()
                        head.sety(y + 20)

                    if head.direction == "down":
                        y = head.ycor()
                        head.sety(y - 20)

                    if head.direction == "left":
                        x = head.xcor()
                        head.setx(x - 20)

                    if head.direction == "right":
                        x = head.xcor()
                        head.setx(x + 20)

                # Keyboard bindings
                wn.listen()
                wn.onkeypress(go_up, "Up")
                wn.onkeypress(go_down, "Down")
                wn.onkeypress(go_left, "Left")
                wn.onkeypress(go_right, "Right")

                # Main game loop
                while True:
                    wn.update()

                    # Check for a collision with the border
                    if head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:
                        time.sleep(1)
                        head.goto(0,0)
                        head.direction = "stop"

                        # Hide the segments
                        for segment in segments:
                            segment.goto(1000, 1000)

                        # Clear the segments list
                        segments.clear()

                        # Reset the score
                        score = 0

                        # Reset the delay
                        delay = 0.1

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 


                    # Check for a collision with the food
                    if head.distance(food) < 20:
                        # Move the food to a random spot
                        x = random.randint(-290, 290)
                        y = random.randint(-290, 290)
                        food.goto(x,y)

                        # Add a segment
                        new_segment = turtle.Turtle()
                        new_segment.speed(0)
                        new_segment.shape("square")
                        new_segment.color("orange")
                        new_segment.penup()
                        segments.append(new_segment)

                        # Shorten the delay
                        delay -= 0.001

                        # Increase the score
                        score += 10

                        if score > high_score:
                            high_score = score

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 

                    # Move the end segments first in reverse order
                    for index in range(len(segments)-1, 0, -1):
                        x = segments[index-1].xcor()
                        y = segments[index-1].ycor()
                        segments[index].goto(x, y)

                    # Move segment 0 to where the head is
                    if len(segments) > 0:
                        x = head.xcor()
                        y = head.ycor()
                        segments[0].goto(x,y)

                    move()    

                    # Check for head collision with the body segments
                    for segment in segments:
                        if segment.distance(head) < 20:
                            time.sleep(1)
                            head.goto(0,0)
                            head.direction = "stop"

                            # Hide the segments
                            for segment in segments:
                                segment.goto(1000, 1000)

                            # Clear the segments list
                            segments.clear()

                            # Reset the score
                            score = 0

                            # Reset the delay
                            delay = 0.1

                            # Update the score display
                            pen.clear()
                            pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal"))

                    time.sleep(delay)

                wn.mainloop()


            if c == "play": # Snake game

                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')


                # Simple Snake Game in Python


                delay = 0.1

                # Score
                score = 0
                high_score = 0

                # Set up the screen
                wn = turtle.Screen()
                wn.title("Snake Game")
                wn.bgcolor("white")
                wn.setup(width=600, height=600)
                wn.tracer(0) # Turns off the screen updates

                # Snake head
                head = turtle.Turtle()
                head.speed(0)
                head.shape("square")
                head.color("red")
                head.penup()
                head.goto(0,0)
                head.direction = "stop"

                # Snake food
                food = turtle.Turtle()
                food.speed(0)
                food.shape("circle")
                food.color("green")
                food.penup()
                food.goto(0,100)

                segments = []

                # Pen
                pen = turtle.Turtle()
                pen.speed(0)
                pen.shape("square")
                pen.color("green")
                pen.penup()
                pen.hideturtle()
                pen.goto(0, 260)
                pen.write("Score: 0  High Score: 0", align="center", font=("Calibri", 24, "normal"))

                # Functions
                def go_up():
                    if head.direction != "down":
                        head.direction = "up"

                def go_down():
                    if head.direction != "up":
                        head.direction = "down"

                def go_left():
                    if head.direction != "right":
                        head.direction = "left"

                def go_right():
                    if head.direction != "left":
                        head.direction = "right"

                def move():
                    if head.direction == "up":
                        y = head.ycor()
                        head.sety(y + 20)

                    if head.direction == "down":
                        y = head.ycor()
                        head.sety(y - 20)

                    if head.direction == "left":
                        x = head.xcor()
                        head.setx(x - 20)

                    if head.direction == "right":
                        x = head.xcor()
                        head.setx(x + 20)

                # Keyboard bindings
                wn.listen()
                wn.onkeypress(go_up, "Up")
                wn.onkeypress(go_down, "Down")
                wn.onkeypress(go_left, "Left")
                wn.onkeypress(go_right, "Right")

                # Main game loop
                while True:
                    wn.update()

                    # Check for a collision with the border
                    if head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:
                        time.sleep(1)
                        head.goto(0,0)
                        head.direction = "stop"

                        # Hide the segments
                        for segment in segments:
                            segment.goto(1000, 1000)

                        # Clear the segments list
                        segments.clear()

                        # Reset the score
                        score = 0

                        # Reset the delay
                        delay = 0.1

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 


                    # Check for a collision with the food
                    if head.distance(food) < 20:
                        # Move the food to a random spot
                        x = random.randint(-290, 290)
                        y = random.randint(-290, 290)
                        food.goto(x,y)

                        # Add a segment
                        new_segment = turtle.Turtle()
                        new_segment.speed(0)
                        new_segment.shape("square")
                        new_segment.color("orange")
                        new_segment.penup()
                        segments.append(new_segment)

                        # Shorten the delay
                        delay -= 0.001

                        # Increase the score
                        score += 10

                        if score > high_score:
                            high_score = score

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 

                    # Move the end segments first in reverse order
                    for index in range(len(segments)-1, 0, -1):
                        x = segments[index-1].xcor()
                        y = segments[index-1].ycor()
                        segments[index].goto(x, y)

                    # Move segment 0 to where the head is
                    if len(segments) > 0:
                        x = head.xcor()
                        y = head.ycor()
                        segments[0].goto(x,y)

                    move()    

                    # Check for head collision with the body segments
                    for segment in segments:
                        if segment.distance(head) < 20:
                            time.sleep(1)
                            head.goto(0,0)
                            head.direction = "stop"

                            # Hide the segments
                            for segment in segments:
                                segment.goto(1000, 1000)

                            # Clear the segments list
                            segments.clear()

                            # Reset the score
                            score = 0

                            # Reset the delay
                            delay = 0.1

                            # Update the score display
                            pen.clear()
                            pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal"))

                    time.sleep(delay)

                wn.mainloop()

            if c == "reminder": # set a reminder

                time.sleep(1)
                print("Ok")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                time.sleep(.7)
                print("")
                print("")
                print(r)
                print("")
                print("")
                tts = gTTS(text=r, lang='en')
                tts.save('read.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/read.mp3')
                os.remove("read.mp3")

            if c == "calculator": # Calculator

            
                print("Ok")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/f.mp3')
                a = input("First number: ")
                a = int(a)
                playsound('C:/Users/surya/Documents/Python/Smart assistant/o.mp3')
                o = input("Operation( + or - or / or x ):")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/s.mp3')
                b = input("Second number: ")
                b = int(b)          


                if o == "+":

                    q = int(a+b)
                    print("")
                    print("Ok! ",a,"+",b,"=",q)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")

                elif o == "-":

                    w = int(a-b)
                    print("")
                    print("Ok! ",a,"-",b,"=",w)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")


                elif o == "/":

                    print("")
                    print("Ok! ",a,"/",b,"=",z)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")


                elif o == "x":

                    t = int(a*b)
                    print("")
                    print("Ok! ",a,"x",b,"=",t)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")

                else:

                    print("Invalid operation")



            if c == "e": # Convert text to speech
                playsound('C:/Users/surya/Documents/Python/Smart assistant/4.mp3')
                print("")
                te = input("What is it? ")
                print("")
                tts = gTTS(text=te, lang='en')
                tts.save("C:/Users/surya/Documents/Python/Smart assistant/sound.mp3")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/sound.mp3')
                os.remove("C:/Users/surya/Documents/Python/Smart assistant/sound.mp3")

            if c == "Convert text to speech": # Convert text to speech
                playsound('C:/Users/surya/Documents/Python/Smart assistant/4.mp3')
                print("")
                te = input("What is it? ")
                print("")
                tts = gTTS(text=te, lang='en')
                tts.save("C:/Users/surya/Documents/Python/Smart assistant/sound.mp3")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/sound.mp3')
                os.remove("C:/Users/surya/Documents/Python/Smart assistant/sound.mp3")

            if c == "text to speech": # Convert text to speech
                playsound('C:/Users/surya/Documents/Python/Smart assistant/4.mp3')
                print("")
                te = input("What is it? ")
                print("")
                tts = gTTS(text=te, lang='en')
                tts.save("C:/Users/surya/Documents/Python/Smart assistant/sound.mp3")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/sound.mp3')
                os.remove("C:/Users/surya/Documents/Python/Smart assistant/sound.mp3")

            if c == "f": # More info

                print("")
                print("This program is written in python, it consists of about 3100 lines of code.")
                print("It was written by Suryanandan Mahesh, seventh-grader learning in")
                print("Ryan international school cochin.")
                print("")
                print("Gmail: suryanandanmahesh@gmail.com")
                print("")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/about.mp3')

            if c == "More info": # More info

                print("")
                print("This program is written in python, it consists of about 3100 lines of code.")
                print("It was written by Suryanandan Mahesh, seventh-grader learning in")
                print("Ryan international school cochin.")
                print("")
                print("Gmail: suryanandanmahesh@gmail.com")
                print("")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/about.mp3')

            if c == "info": # More info

                print("")
                print("This program is written in python, it consists of about 3110 lines of code.")
                print("It was written by Suryanandan Mahesh, seventh-grader learning in")
                print("Ryan international school cochin.")
                print("")
                print("Gmail: suryanandanmahesh@gmail.com")
                print("")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/about.mp3')

            if c == "more": # More info

                print("")
                print("This program is written in python, it consists of about 3100 lines of code.")
                print("It was written by Suryanandan Mahesh, seventh-grader learning in")
                print("Ryan international school cochin.")
                print("")
                print("Gmail: suryanandanmahesh@gmail.com")
                print("")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/about.mp3')



    finally:

        print("OK")

if key == "keyboard":
    
    print("Hi! I am your personal assistant, nice to meet you!")
    playsound('C:/Users/surya/Documents/Python/Smart assistant/1.mp3')

    # These are the things you can say to the assistant
    print("")
    print("You can ask me things like:")
    print("")
    print("a)Play a game")
    print("b)Set a reminder")
    print("c)Show the reminder")
    print("d)Open calculator")
    print("e)Convert text to speech")
    print("f)More info")
    print("")
    playsound('C:/Users/surya/Documents/Python/Smart assistant/2.mp3')
    
    try:
        while True:

            playsound('C:/Users/surya/Documents/Python/Smart assistant/3.mp3')
            c = input("What would you like to do? ")

            if c == "What is the weather":
                playsound('C:/Users/surya/Documents/Python/Smart assistant/we.mp3')
                response = requests.get(URL)

                # checking the status code of the request
                if response.status_code == 200:

                   # retrieving data in the json format
                   data = response.json()

                   # take the main dict block
                   main = data['main']

                   # getting temperature
                   temperature = main['temp']
                   # getting feel like
                   temp_feel_like = main['feels_like']  
                   # getting the humidity
                   humidity = main['humidity']
                   # getting the pressure
                   pressure = main['pressure']

                   # weather report
                   weather_report = data['weather']
                   # wind report
                   wind_report = data['wind']

                   print("")
                   print(f"{CITY:-^35}")
                   print(f"Temperature: {temperature}")
                   print(f"Feel Like: {temp_feel_like}")    
                   print(f"Humidity: {humidity}")
                   print(f"Pressure: {pressure}")
                   print(f"Weather Report: {weather_report[0]['description']}")
                   print(f"Wind Speed: {wind_report['speed']}")
                   print("")
                else:
                   # showing the error message
                   print("Error in the HTTP request")

            if c == "What's the weather":
                playsound('C:/Users/surya/Documents/Python/Smart assistant/we.mp3')
                response = requests.get(URL)

                # checking the status code of the request
                if response.status_code == 200:

                   # retrieving data in the json format
                   data = response.json()

                   # take the main dict block
                   main = data['main']

                   # getting temperature
                   temperature = main['temp']
                   # getting feel like
                   temp_feel_like = main['feels_like']  
                   # getting the humidity
                   humidity = main['humidity']
                   # getting the pressure
                   pressure = main['pressure']

                   # weather report
                   weather_report = data['weather']
                   # wind report
                   wind_report = data['wind']

                   print("")
                   print(f"{CITY:-^35}")
                   print(f"Temperature: {temperature}")
                   print(f"Feel Like: {temp_feel_like}")    
                   print(f"Humidity: {humidity}")
                   print(f"Pressure: {pressure}")
                   print(f"Weather Report: {weather_report[0]['description']}")
                   print(f"Wind Speed: {wind_report['speed']}")
                   print("")
                else:
                   # showing the error message
                   print("Error in the HTTP request")
                   
            if c == "a": # 'a' to play the snake game

                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')


                # Simple Snake Game in Python

                delay = 0.1

                # Score
                score = 0
                high_score = 0

                # Set up the screen
                wn = turtle.Screen()
                wn.title("Snake Game")
                wn.bgcolor("white")
                wn.setup(width=600, height=600)
                wn.tracer(0) # Turns off the screen updates

                # Snake head
                head = turtle.Turtle()
                head.speed(0)
                head.shape("square")
                head.color("red")
                head.penup()
                head.goto(0,0)
                head.direction = "stop"

                # Snake food
                food = turtle.Turtle()
                food.speed(0)
                food.shape("circle")
                food.color("green")
                food.penup()
                food.goto(0,100)

                segments = []

                # Pen
                pen = turtle.Turtle()
                pen.speed(0)
                pen.shape("square")
                pen.color("green")
                pen.penup()
                pen.hideturtle()
                pen.goto(0, 260)
                pen.write("Score: 0  High Score: 0", align="center", font=("Calibri", 24, "normal"))

                # Functions
                def go_up():
                    if head.direction != "down":
                        head.direction = "up"

                def go_down():
                    if head.direction != "up":
                        head.direction = "down"

                def go_left():
                    if head.direction != "right":
                        head.direction = "left"

                def go_right():
                    if head.direction != "left":
                        head.direction = "right"

                def move():
                    if head.direction == "up":
                        y = head.ycor()
                        head.sety(y + 20)

                    if head.direction == "down":
                        y = head.ycor()
                        head.sety(y - 20)

                    if head.direction == "left":
                        x = head.xcor()
                        head.setx(x - 20)

                    if head.direction == "right":
                        x = head.xcor()
                        head.setx(x + 20)

                # Keyboard bindings
                wn.listen()
                wn.onkeypress(go_up, "Up")
                wn.onkeypress(go_down, "Down")
                wn.onkeypress(go_left, "Left")
                wn.onkeypress(go_right, "Right")

                # Main game loop
                while True:
                    wn.update()

                    # Check for a collision with the border
                    if head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:
                        time.sleep(1)
                        head.goto(0,0)
                        head.direction = "stop"

                        # Hide the segments
                        for segment in segments:
                            segment.goto(1000, 1000)

                        # Clear the segments list
                        segments.clear()

                        # Reset the score
                        score = 0

                        # Reset the delay
                        delay = 0.1

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 


                    # Check for a collision with the food
                    if head.distance(food) < 20:
                        # Move the food to a random spot
                        x = random.randint(-290, 290)
                        y = random.randint(-290, 290)
                        food.goto(x,y)

                        # Add a segment
                        new_segment = turtle.Turtle()
                        new_segment.speed(0)
                        new_segment.shape("square")
                        new_segment.color("orange")
                        new_segment.penup()
                        segments.append(new_segment)

                        # Shorten the delay
                        delay -= 0.001

                        # Increase the score
                        score += 10

                        if score > high_score:
                            high_score = score

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 

                    # Move the end segments first in reverse order
                    for index in range(len(segments)-1, 0, -1):
                        x = segments[index-1].xcor()
                        y = segments[index-1].ycor()
                        segments[index].goto(x, y)

                    # Move segment 0 to where the head is
                    if len(segments) > 0:
                        x = head.xcor()
                        y = head.ycor()
                        segments[0].goto(x,y)

                    move()    

                    # Check for head collision with the body segments
                    for segment in segments:
                        if segment.distance(head) < 20:
                            time.sleep(1)
                            head.goto(0,0)
                            head.direction = "stop"

                            # Hide the segments
                            for segment in segments:
                                segment.goto(1000, 1000)

                            # Clear the segments list
                            segments.clear()

                            # Reset the score
                            score = 0

                            # Reset the delay
                            delay = 0.1

                            # Update the score display
                            pen.clear()
                            pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal"))

                    time.sleep(delay)

                wn.mainloop()

            if c == "a.": # Cheating mode by pressing 'a.'

                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')


                # Simple Snake Game in Python

                delay = 0.1

                # Score
                score = 0
                high_score = 0

                # Set up the screen
                wn = turtle.Screen()
                wn.title("Snake Game")
                wn.bgcolor("white")
                wn.setup(width=600, height=600)
                wn.tracer(0) # Turns off the screen updates

                # Snake head
                head = turtle.Turtle()
                head.speed(0)
                head.shape("square")
                head.color("red")
                head.penup()
                head.goto(0,0)
                head.direction = "stop"

                # Snake food
                food = turtle.Turtle()
                food.speed(0)
                food.shape("circle")
                food.color("green")
                food.penup()
                food.goto(0,100)

                segments = []

                # Pen
                pen = turtle.Turtle()
                pen.speed(0)
                pen.shape("square")
                pen.color("green")
                pen.penup()
                pen.hideturtle()
                pen.goto(0, 260)
                pen.write("Score: 0  High Score: 0", align="center", font=("Calibri", 24, "normal"))

                # Functions
                def go_up():
                    if head.direction != "down":
                        head.direction = "up"

                def go_down():
                    if head.direction != "up":
                        head.direction = "down"

                def go_left():
                    if head.direction != "right":
                        head.direction = "left"

                def go_right():
                    if head.direction != "left":
                        head.direction = "right"

                def move():
                    if head.direction == "up":
                        y = head.ycor()
                        head.sety(y + 20)

                    if head.direction == "down":
                        y = head.ycor()
                        head.sety(y - 20)

                    if head.direction == "left":
                        x = head.xcor()
                        head.setx(x - 20)

                    if head.direction == "right":
                        x = head.xcor()
                        head.setx(x + 20)

                # Keyboard bindings
                wn.listen()
                wn.onkeypress(go_up, "Down")
                wn.onkeypress(go_down, "Up")
                wn.onkeypress(go_left, "Right")
                wn.onkeypress(go_right, "Left")

                # Main game loop
                while True:
                    wn.update()

                    # Check for a collision with the border
                    if head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:
                        time.sleep(1)
                        head.goto(0,0)
                        head.direction = "stop"

                        # Hide the segments
                        for segment in segments:
                            segment.goto(1000, 1000)

                        # Clear the segments list
                        segments.clear()

                        # Reset the score
                        score = 0

                        # Reset the delay
                        delay = 0.1

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 


                    # Check for a collision with the food
                    if head.distance(food) < 20:
                        # Move the food to a random spot
                        x = random.randint(-290, 290)
                        y = random.randint(-290, 290)
                        food.goto(x,y)

                        # Add a segment
                        new_segment = turtle.Turtle()
                        new_segment.speed(0)
                        new_segment.shape("square")
                        new_segment.color("orange")
                        new_segment.penup()
                        segments.append(new_segment)

                        # Shorten the delay
                        delay -= 0.001

                        # Increase the score
                        score += 10

                        if score > high_score:
                            high_score = score

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 

                    # Move the end segments first in reverse order
                    for index in range(len(segments)-1, 0, -1):
                        x = segments[index-1].xcor()
                        y = segments[index-1].ycor()
                        segments[index].goto(x, y)

                    # Move segment 0 to where the head is
                    if len(segments) > 0:
                        x = head.xcor()
                        y = head.ycor()
                        segments[0].goto(x,y)

                    move()    

                    # Check for head collision with the body segments
                    for segment in segments:
                        if segment.distance(head) < 20:
                            time.sleep(1)
                            head.goto(0,0)
                            head.direction = "stop"

                            # Hide the segments
                            for segment in segments:
                                segment.goto(1000, 1000)

                            # Clear the segments list
                            segments.clear()

                            # Reset the score
                            score = 0

                            # Reset the delay
                            delay = 0.1

                            # Update the score display
                            pen.clear()
                            pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal"))

                    time.sleep(delay)

                wn.mainloop()

            if c == "a,": # Cheating mode by pressing 'a,'

                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')


                # Simple Snake Game in Python

                delay = 0.1

                # Score
                score = 0
                high_score = 0

                # Set up the screen
                wn = turtle.Screen()
                wn.title("Snake Game")
                wn.bgcolor("white")
                wn.setup(width=600, height=600)
                wn.tracer(0) # Turns off the screen updates

                # Snake head
                head = turtle.Turtle()
                head.speed(0)
                head.shape("square")
                head.color("red")
                head.penup()
                head.goto(0,0)
                head.direction = "stop"

                # Snake food
                food = turtle.Turtle()
                food.speed(0)
                food.shape("circle")
                food.color("green")
                food.penup()
                food.goto(0,100)

                segments = []

                # Pen
                pen = turtle.Turtle()
                pen.speed(0)
                pen.shape("square")
                pen.color("green")
                pen.penup()
                pen.hideturtle()
                pen.goto(0, 260)
                pen.write("Score: 0  High Score: 0", align="center", font=("Calibri", 24, "normal"))

                # Functions
                def go_up():
                    if head.direction != "down":
                        head.direction = "up"

                def go_down():
                    if head.direction != "up":
                        head.direction = "down"

                def go_left():
                    if head.direction != "right":
                        head.direction = "left"

                def go_right():
                    if head.direction != "left":
                        head.direction = "right"

                def move():
                    if head.direction == "up":
                        y = head.ycor()
                        head.sety(y + 20)

                    if head.direction == "down":
                        y = head.ycor()
                        head.sety(y - 20)

                    if head.direction == "left":
                        x = head.xcor()
                        head.setx(x - 20)

                    if head.direction == "right":
                        x = head.xcor()
                        head.setx(x + 20)

                # Keyboard bindings
                wn.listen()
                wn.onkeypress(go_up, "Up")
                wn.onkeypress(go_down, "Down")
                wn.onkeypress(go_left, "Left")
                wn.onkeypress(go_right, "Right")

                # Main game loop
                while True:
                    wn.update()

                    # Check for a collision with the border
                    if head.xcor()>290 or head.xcor()<-90 or head.ycor()>90 or head.ycor()<-190:
                        time.sleep(1)
                        head.goto(0,0)
                        head.direction = "stop"

                        # Hide the segments
                        for segment in segments:
                            segment.goto(1000, 1000)

                        # Clear the segments list
                        segments.clear()

                        # Reset the score
                        score = 0

                        # Reset the delay
                        delay = 0.1

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 


                    # Check for a collision with the food
                    if head.distance(food) < 20:
                        # Move the food to a random spot
                        x = random.randint(-290, 290)
                        y = random.randint(-290, 290)
                        food.goto(x,y)

                        # Add a segment
                        new_segment = turtle.Turtle()
                        new_segment.speed(0)
                        new_segment.shape("square")
                        new_segment.color("orange")
                        new_segment.penup()
                        segments.append(new_segment)

                        # Shorten the delay
                        delay -= 0.001

                        # Increase the score
                        score += 10

                        if score > high_score:
                            high_score = score

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 

                    # Move the end segments first in reverse order
                    for index in range(len(segments)-1, 0, -1):
                        x = segments[index-1].xcor()
                        y = segments[index-1].ycor()
                        segments[index].goto(x, y)

                    # Move segment 0 to where the head is
                    if len(segments) > 0:
                        x = head.xcor()
                        y = head.ycor()
                        segments[0].goto(x,y)

                    move()    

                    # Check for head collision with the body segments
                    for segment in segments:
                        if segment.distance(head) < 20:
                            time.sleep(1)
                            head.goto(0,0)
                            head.direction = "stop"

                            # Hide the segments
                            for segment in segments:
                                segment.goto(1000, 1000)

                            # Clear the segments list
                            segments.clear()

                            # Reset the score
                            score = 0

                            # Reset the delay
                            delay = 0.1

                            # Update the score display
                            pen.clear()
                            pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal"))

                    time.sleep(delay)

                wn.mainloop()


            if c == "admin": # This is the admin section
                print("______________________________Warning___________________________________")
                print("(Note this is a highly secured part of the code, it ")
                print("has 3 step verification if you are caught you will we arrested)")
                print("")
                Pass = input("Passcode: ")
                if Pass == "admin1234":
                    print("Write this pin when you are asked to: ")
                    print("74356")
                    print("")
                    las = input("Pin: ")
                    if las == "74356":
                        print("")
                        print("Welcome")
                        playsound('C:/Users/surya/Documents/Python/Smart assistant/w.mp3')
                        print("")
                        pin = input("Pin: ")
                        if pin == "767836":
                            print("")
                            print("Access Granted")
                            playsound('C:/Users/surya/Documents/Python/Smart assistant/g.mp3')
                            print("You can see further details in 5 seconds.")
                            time.sleep(5)
                            print("_________________________Cheat Sheet____________________________")
                            print("")
                            print(" 1) To play a game insted of 'a' use 'a,' which will ")
                            print("make the play area smaller so that the person will lose.")
                            print("")
                            print("2) To play a game insted of 'a' use 'a.' which will reverse")
                            print("the arrow keys so that the person will get confused")
                            print("")
                            print("")
                            time.sleep(5)                       

                        else:
                            print("")
                            print("Access Dinied")
                            playsound('C:/Users/surya/Documents/Python/Smart assistant/a.mp3')
                            quit()

                    else:
                        print("")
                        print("Access Dinied")
                        playsound('C:/Users/surya/Documents/Python/Smart assistant/a.mp3')
                        quit()
                else:
                    print("")
                    print("Access Dinied")
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/a.mp3')
                    quit()

            if c == "b": # Set a reminder

                playsound('C:/Users/surya/Documents/Python/Smart assistant/4.mp3')
                r = input("What is it?")
                time.sleep(1)
                playsound('C:/Users/surya/Documents/Python/Smart assistant/5.mp3')
                t = input("How many minutes later should I show it?")
                t = int(t)
                print("The reminder has been set")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/6.mp3')
                time.sleep(t*60-7)
                playsound('C:/Users/surya/Documents/Python/Smart assistant/Bell.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/rem.mp3')
                time.sleep(.5)
                print("")
                print("")
                print(r)
                print("")
                tts = gTTS(text=r, lang='en')
                tts.save('read.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/read.mp3')
                os.remove("read.mp3")

            if c == "c": # Show the reminder

                time.sleep(1)
                print("Ok")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                time.sleep(.7)
                print("")
                print("")
                print(r)
                print("")
                print("")
                tts = gTTS(text=r, lang='en')
                tts.save('read.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/read.mp3')
                os.remove("read.mp3")

            if c == "d": # Calculator

            
                print("Ok")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/f.mp3')
                a = input("First number: ")
                a = int(a)
                playsound('C:/Users/surya/Documents/Python/Smart assistant/o.mp3')
                o = input("Operation( + or - or / or x ):")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/s.mp3')
                b = input("Second number: ")
                b = int(b)          


                if o == "+":

                    q = int(a+b)
                    print("")
                    print("Ok! ",a,"+",b,"=",q)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")

                elif o == "-":

                    w = int(a-b)
                    print("")
                    print("Ok! ",a,"-",b,"=",w)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")


                elif o == "/":

                    z = int(a-b)
                    print("")
                    print("Ok! ",a,"/",b,"=",z)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")


                elif o == "x":

                    t = int(a*b)
                    print("")
                    print("Ok! ",a,"x",b,"=",t)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")

                else:

                    print("Invalid operation")
            if c == "Play a game": # Snake game

                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')


                # Simple Snake Game in Python


                delay = 0.1

                # Score
                score = 0
                high_score = 0

                # Set up the screen
                wn = turtle.Screen()
                wn.title("Snake Game")
                wn.bgcolor("white")
                wn.setup(width=600, height=600)
                wn.tracer(0) # Turns off the screen updates

                # Snake head
                head = turtle.Turtle()
                head.speed(0)
                head.shape("square")
                head.color("red")
                head.penup()
                head.goto(0,0)
                head.direction = "stop"

                # Snake food
                food = turtle.Turtle()
                food.speed(0)
                food.shape("circle")
                food.color("green")
                food.penup()
                food.goto(0,100)

                segments = []

                # Pen
                pen = turtle.Turtle()
                pen.speed(0)
                pen.shape("square")
                pen.color("green")
                pen.penup()
                pen.hideturtle()
                pen.goto(0, 260)
                pen.write("Score: 0  High Score: 0", align="center", font=("Calibri", 24, "normal"))

                # Functions
                def go_up():
                    if head.direction != "down":
                        head.direction = "up"

                def go_down():
                    if head.direction != "up":
                        head.direction = "down"

                def go_left():
                    if head.direction != "right":
                        head.direction = "left"

                def go_right():
                    if head.direction != "left":
                        head.direction = "right"

                def move():
                    if head.direction == "up":
                        y = head.ycor()
                        head.sety(y + 20)

                    if head.direction == "down":
                        y = head.ycor()
                        head.sety(y - 20)

                    if head.direction == "left":
                        x = head.xcor()
                        head.setx(x - 20)

                    if head.direction == "right":
                        x = head.xcor()
                        head.setx(x + 20)

                # Keyboard bindings
                wn.listen()
                wn.onkeypress(go_up, "Up")
                wn.onkeypress(go_down, "Down")
                wn.onkeypress(go_left, "Left")
                wn.onkeypress(go_right, "Right")

                # Main game loop
                while True:
                    wn.update()

                    # Check for a collision with the border
                    if head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:
                        time.sleep(1)
                        head.goto(0,0)
                        head.direction = "stop"

                        # Hide the segments
                        for segment in segments:
                            segment.goto(1000, 1000)

                        # Clear the segments list
                        segments.clear()

                        # Reset the score
                        score = 0

                        # Reset the delay
                        delay = 0.1

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 


                    # Check for a collision with the food
                    if head.distance(food) < 20:
                        # Move the food to a random spot
                        x = random.randint(-290, 290)
                        y = random.randint(-290, 290)
                        food.goto(x,y)

                        # Add a segment
                        new_segment = turtle.Turtle()
                        new_segment.speed(0)
                        new_segment.shape("square")
                        new_segment.color("orange")
                        new_segment.penup()
                        segments.append(new_segment)

                        # Shorten the delay
                        delay -= 0.001

                        # Increase the score
                        score += 10

                        if score > high_score:
                            high_score = score

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 

                    # Move the end segments first in reverse order
                    for index in range(len(segments)-1, 0, -1):
                        x = segments[index-1].xcor()
                        y = segments[index-1].ycor()
                        segments[index].goto(x, y)

                    # Move segment 0 to where the head is
                    if len(segments) > 0:
                        x = head.xcor()
                        y = head.ycor()
                        segments[0].goto(x,y)

                    move()    

                    # Check for head collision with the body segments
                    for segment in segments:
                        if segment.distance(head) < 20:
                            time.sleep(1)
                            head.goto(0,0)
                            head.direction = "stop"

                            # Hide the segments
                            for segment in segments:
                                segment.goto(1000, 1000)

                            # Clear the segments list
                            segments.clear()

                            # Reset the score
                            score = 0

                            # Reset the delay
                            delay = 0.1

                            # Update the score display
                            pen.clear()
                            pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal"))

                    time.sleep(delay)

                wn.mainloop()


            if c == "Set a reminder": # Set a reminder

                playsound('C:/Users/surya/Documents/Python/Smart assistant/4.mp3')
                r = input("What is it?")
                time.sleep(1)
                playsound('C:/Users/surya/Documents/Python/Smart assistant/5.mp3')
                t = input("How many minutes later should I show it?")
                t = int(t)
                print("The reminder has been set")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/6.mp3')
                time.sleep(t*60-7)
                playsound('C:/Users/surya/Documents/Python/Smart assistant/Bell.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/rem.mp3')
                time.sleep(.5)
                print("")
                print("")
                print(r)
                print("")
                tts = gTTS(text=r, lang='en')
                tts.save('read.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/read.mp3')
                os.remove("read.mp3")

            if c == "Show the reminder": # Show the reminder

                time.sleep(1)
                print("Ok")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                time.sleep(.7)
                print("")
                print("")
                print(r)
                print("")
                print("")
                tts = gTTS(text=r, lang='en')
                tts.save('read.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/read.mp3')
                os.remove("read.mp3")

            if c == "Open calculator": # Calculator

            
                print("Ok")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/f.mp3')
                a = input("First number: ")
                a = int(a)
                playsound('C:/Users/surya/Documents/Python/Smart assistant/o.mp3')
                o = input("Operation( + or - or / or x ):")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/s.mp3')
                b = input("Second number: ")
                b = int(b)          


                if o == "+": 

                    q = int(a+b)
                    print("")
                    print("Ok! ",a,"+",b,"=",q)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")

                elif o == "-":

                    w = int(a-b)
                    print("")
                    print("Ok! ",a,"-",b,"=",w)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")


                elif o == "/":

                    print("")
                    print("Ok! ",a,"/",b,"=",z)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")


                elif o == "x":

                    t = int(a*b)
                    print("")
                    print("Ok! ",a,"x",b,"=",t)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")

                else:

                    print("Invalid operation")

            if c == "game": # Snake game

                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')


                # Simple Snake Game in Python


                delay = 0.1

                # Score
                score = 0
                high_score = 0

                # Set up the screen
                wn = turtle.Screen()
                wn.title("Snake Game")
                wn.bgcolor("white")
                wn.setup(width=600, height=600)
                wn.tracer(0) # Turns off the screen updates

                # Snake head
                head = turtle.Turtle()
                head.speed(0)
                head.shape("square")
                head.color("red")
                head.penup()
                head.goto(0,0)
                head.direction = "stop"

                # Snake food
                food = turtle.Turtle()
                food.speed(0)
                food.shape("circle")
                food.color("green")
                food.penup()
                food.goto(0,100)

                segments = []

                # Pen
                pen = turtle.Turtle()
                pen.speed(0)
                pen.shape("square")
                pen.color("green")
                pen.penup()
                pen.hideturtle()
                pen.goto(0, 260)
                pen.write("Score: 0  High Score: 0", align="center", font=("Calibri", 24, "normal"))

                # Functions
                def go_up():
                    if head.direction != "down":
                        head.direction = "up"

                def go_down():
                    if head.direction != "up":
                        head.direction = "down"

                def go_left():
                    if head.direction != "right":
                        head.direction = "left"

                def go_right():
                    if head.direction != "left":
                        head.direction = "right"

                def move():
                    if head.direction == "up":
                        y = head.ycor()
                        head.sety(y + 20)

                    if head.direction == "down":
                        y = head.ycor()
                        head.sety(y - 20)

                    if head.direction == "left":
                        x = head.xcor()
                        head.setx(x - 20)

                    if head.direction == "right":
                        x = head.xcor()
                        head.setx(x + 20)

                # Keyboard bindings
                wn.listen()
                wn.onkeypress(go_up, "Up")
                wn.onkeypress(go_down, "Down")
                wn.onkeypress(go_left, "Left")
                wn.onkeypress(go_right, "Right")

                # Main game loop
                while True:
                    wn.update()

                    # Check for a collision with the border
                    if head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:
                        time.sleep(1)
                        head.goto(0,0)
                        head.direction = "stop"

                        # Hide the segments
                        for segment in segments:
                            segment.goto(1000, 1000)

                        # Clear the segments list
                        segments.clear()

                        # Reset the score
                        score = 0

                        # Reset the delay
                        delay = 0.1

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 


                    # Check for a collision with the food
                    if head.distance(food) < 20:
                        # Move the food to a random spot
                        x = random.randint(-290, 290)
                        y = random.randint(-290, 290)
                        food.goto(x,y)

                        # Add a segment
                        new_segment = turtle.Turtle()
                        new_segment.speed(0)
                        new_segment.shape("square")
                        new_segment.color("orange")
                        new_segment.penup()
                        segments.append(new_segment)

                        # Shorten the delay
                        delay -= 0.001

                        # Increase the score
                        score += 10

                        if score > high_score:
                            high_score = score

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 

                    # Move the end segments first in reverse order
                    for index in range(len(segments)-1, 0, -1):
                        x = segments[index-1].xcor()
                        y = segments[index-1].ycor()
                        segments[index].goto(x, y)

                    # Move segment 0 to where the head is
                    if len(segments) > 0:
                        x = head.xcor()
                        y = head.ycor()
                        segments[0].goto(x,y)

                    move()    

                    # Check for head collision with the body segments
                    for segment in segments:
                        if segment.distance(head) < 20:
                            time.sleep(1)
                            head.goto(0,0)
                            head.direction = "stop"

                            # Hide the segments
                            for segment in segments:
                                segment.goto(1000, 1000)

                            # Clear the segments list
                            segments.clear()

                            # Reset the score
                            score = 0

                            # Reset the delay
                            delay = 0.1

                            # Update the score display
                            pen.clear()
                            pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal"))

                    time.sleep(delay)

                wn.mainloop()


            if c == "play": # Snake game

                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')


                # Simple Snake Game in Python


                delay = 0.1

                # Score
                score = 0
                high_score = 0

                # Set up the screen
                wn = turtle.Screen()
                wn.title("Snake Game")
                wn.bgcolor("white")
                wn.setup(width=600, height=600)
                wn.tracer(0) # Turns off the screen updates

                # Snake head
                head = turtle.Turtle()
                head.speed(0)
                head.shape("square")
                head.color("red")
                head.penup()
                head.goto(0,0)
                head.direction = "stop"

                # Snake food
                food = turtle.Turtle()
                food.speed(0)
                food.shape("circle")
                food.color("green")
                food.penup()
                food.goto(0,100)

                segments = []

                # Pen
                pen = turtle.Turtle()
                pen.speed(0)
                pen.shape("square")
                pen.color("green")
                pen.penup()
                pen.hideturtle()
                pen.goto(0, 260)
                pen.write("Score: 0  High Score: 0", align="center", font=("Calibri", 24, "normal"))

                # Functions
                def go_up():
                    if head.direction != "down":
                        head.direction = "up"

                def go_down():
                    if head.direction != "up":
                        head.direction = "down"

                def go_left():
                    if head.direction != "right":
                        head.direction = "left"

                def go_right():
                    if head.direction != "left":
                        head.direction = "right"

                def move():
                    if head.direction == "up":
                        y = head.ycor()
                        head.sety(y + 20)

                    if head.direction == "down":
                        y = head.ycor()
                        head.sety(y - 20)

                    if head.direction == "left":
                        x = head.xcor()
                        head.setx(x - 20)

                    if head.direction == "right":
                        x = head.xcor()
                        head.setx(x + 20)

                # Keyboard bindings
                wn.listen()
                wn.onkeypress(go_up, "Up")
                wn.onkeypress(go_down, "Down")
                wn.onkeypress(go_left, "Left")
                wn.onkeypress(go_right, "Right")

                # Main game loop
                while True:
                    wn.update()

                    # Check for a collision with the border
                    if head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:
                        time.sleep(1)
                        head.goto(0,0)
                        head.direction = "stop"

                        # Hide the segments
                        for segment in segments:
                            segment.goto(1000, 1000)

                        # Clear the segments list
                        segments.clear()

                        # Reset the score
                        score = 0

                        # Reset the delay
                        delay = 0.1

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 


                    # Check for a collision with the food
                    if head.distance(food) < 20:
                        # Move the food to a random spot
                        x = random.randint(-290, 290)
                        y = random.randint(-290, 290)
                        food.goto(x,y)

                        # Add a segment
                        new_segment = turtle.Turtle()
                        new_segment.speed(0)
                        new_segment.shape("square")
                        new_segment.color("orange")
                        new_segment.penup()
                        segments.append(new_segment)

                        # Shorten the delay
                        delay -= 0.001

                        # Increase the score
                        score += 10

                        if score > high_score:
                            high_score = score

                        pen.clear()
                        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal")) 

                    # Move the end segments first in reverse order
                    for index in range(len(segments)-1, 0, -1):
                        x = segments[index-1].xcor()
                        y = segments[index-1].ycor()
                        segments[index].goto(x, y)

                    # Move segment 0 to where the head is
                    if len(segments) > 0:
                        x = head.xcor()
                        y = head.ycor()
                        segments[0].goto(x,y)

                    move()    

                    # Check for head collision with the body segments
                    for segment in segments:
                        if segment.distance(head) < 20:
                            time.sleep(1)
                            head.goto(0,0)
                            head.direction = "stop"

                            # Hide the segments
                            for segment in segments:
                                segment.goto(1000, 1000)

                            # Clear the segments list
                            segments.clear()

                            # Reset the score
                            score = 0

                            # Reset the delay
                            delay = 0.1

                            # Update the score display
                            pen.clear()
                            pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Calibri", 24, "normal"))

                    time.sleep(delay)

                wn.mainloop()

            if c == "reminder": # set a reminder

                time.sleep(1)
                print("Ok")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                time.sleep(.7)
                print("")
                print("")
                print(r)
                print("")
                print("")
                tts = gTTS(text=r, lang='en')
                tts.save('read.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/read.mp3')
                os.remove("read.mp3")

            if c == "calculator": # Calculator

            
                print("Ok")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                playsound('C:/Users/surya/Documents/Python/Smart assistant/f.mp3')
                a = input("First number: ")
                a = int(a)
                playsound('C:/Users/surya/Documents/Python/Smart assistant/o.mp3')
                o = input("Operation( + or - or / or x ):")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/s.mp3')
                b = input("Second number: ")
                b = int(b)          


                if o == "+":

                    q = int(a+b)
                    print("")
                    print("Ok! ",a,"+",b,"=",q)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")

                elif o == "-":

                    w = int(a-b)
                    print("")
                    print("Ok! ",a,"-",b,"=",w)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")


                elif o == "/":

                    print("")
                    print("Ok! ",a,"/",b,"=",z)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")


                elif o == "x":

                    t = int(a*b)
                    print("")
                    print("Ok! ",a,"x",b,"=",t)
                    playsound('C:/Users/surya/Documents/Python/Smart assistant/7.mp3')
                    print("")

                else:

                    print("Invalid operation")



            if c == "e": # Convert text to speech
                playsound('C:/Users/surya/Documents/Python/Smart assistant/4.mp3')
                print("")
                te = input("What is it? ")
                print("")
                tts = gTTS(text=te, lang='en')
                tts.save("C:/Users/surya/Documents/Python/Smart assistant/sound.mp3")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/sound.mp3')
                os.remove("C:/Users/surya/Documents/Python/Smart assistant/sound.mp3")

            if c == "Convert text to speech": # Convert text to speech
                playsound('C:/Users/surya/Documents/Python/Smart assistant/4.mp3')
                print("")
                te = input("What is it? ")
                print("")
                tts = gTTS(text=te, lang='en')
                tts.save("C:/Users/surya/Documents/Python/Smart assistant/sound.mp3")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/sound.mp3')
                os.remove("C:/Users/surya/Documents/Python/Smart assistant/sound.mp3")

            if c == "text to speech": # Convert text to speech
                playsound('C:/Users/surya/Documents/Python/Smart assistant/4.mp3')
                print("")
                te = input("What is it? ")
                print("")
                tts = gTTS(text=te, lang='en')
                tts.save("C:/Users/surya/Documents/Python/Smart assistant/sound.mp3")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/sound.mp3')
                os.remove("C:/Users/surya/Documents/Python/Smart assistant/sound.mp3")

            if c == "f": # More info

                print("")
                print("This program is written in python, it consists of about 3100 lines of code.")
                print("It was written by Suryanandan Mahesh, seventh-grader learning in")
                print("Ryan international school cochin.")
                print("")
                print("Gmail: suryanandanmahesh@gmail.com")
                print("")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/about.mp3')

            if c == "More info": # More info

                print("")
                print("This program is written in python, it consists of about 3100 lines of code.")
                print("It was written by Suryanandan Mahesh, seventh-grader learning in")
                print("Ryan international school cochin.")
                print("")
                print("Gmail: suryanandanmahesh@gmail.com")
                print("")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/about.mp3')

            if c == "info": # More info

                print("")
                print("This program is written in python, it consists of about 3100 lines of code.")
                print("It was written by Suryanandan Mahesh, seventh-grader learning in")
                print("Ryan international school cochin.")
                print("")
                print("Gmail: suryanandanmahesh@gmail.com")
                print("")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/about.mp3')


            if c == "more": # More info

                print("")
                print("This program is written in python, it consists of about 3100 lines of code.")
                print("It was written by Suryanandan Mahesh, seventh-grader learning in")
                print("Ryan international school cochin.")
                print("")
                print("Gmail: suryanandanmahesh@gmail.com")
                print("")
                playsound('C:/Users/surya/Documents/Python/Smart assistant/about.mp3')



    finally:
    
        print("OK")
